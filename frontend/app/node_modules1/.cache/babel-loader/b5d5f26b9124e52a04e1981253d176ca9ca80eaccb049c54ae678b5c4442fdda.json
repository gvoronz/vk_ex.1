{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/site/frontend/app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Table, Spin, Alert } from \"antd\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"IP Address\",\n  dataIndex: \"IPAddress\",\n  key: \"ip\"\n}, {\n  title: \"Ping Time (ms)\",\n  dataIndex: \"PingTime\",\n  key: \"pingTime\"\n}, {\n  title: \"Last Seen\",\n  dataIndex: \"LastSeen\",\n  key: \"lastSeen\",\n  render: text => moment(text).format(\"YYYY-MM-DD HH:mm:ss\")\n}];\nexport default function App() {\n  _s();\n  const [data, setData] = useState([]); // Состояние для данных\n  const [loading, setLoading] = useState(true); // Состояние для индикатора загрузки\n  const [error, setError] = useState(\"\"); // Состояние для ошибки\n\n  // Функция для получения данных с сервера\n  const fetchData = async () => {\n    try {\n      setLoading(true); // Включаем индикатор загрузки\n      setError(\"\"); // Сброс ошибки перед новым запросом\n\n      const response = await fetch(\"http://localhost:8080/ping-results\");\n\n      // Если ответ от сервера не успешный, выводим ошибку с деталью\n      if (!response.ok) {\n        const errorText = await response.text(); // Получаем текст ошибки от сервера\n        throw new Error(`Ошибка при получении данных: ${response.status} ${errorText}`);\n      }\n\n      // Преобразуем ответ в формат JSON\n      const result = await response.json();\n      setData(result); // Устанавливаем данные в состояние\n    } catch (error) {\n      setError(`Не удалось загрузить данные. ${error.message}`); // Выводим более точное сообщение об ошибке\n      console.error(\"Ошибка загрузки:\", error); // Логируем ошибку в консоль\n    } finally {\n      setLoading(false); // Окончание загрузки\n    }\n  };\n\n  // Хук useEffect для первого запроса и периодического обновления данных\n  useEffect(() => {\n    fetchData(); // Получаем данные сразу при загрузке компонента\n    const interval = setInterval(fetchData, 30000); // Периодический запрос данных каждые 30 секунд\n    return () => clearInterval(interval); // Очищаем интервал при размонтировании компонента\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"\\u0420\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u044B \\u043F\\u0438\\u043D\\u0433\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      message: error,\n      type: \"error\",\n      showIcon: true,\n      className: \"mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), \" \", loading ? /*#__PURE__*/_jsxDEV(Spin, {\n      size: \"large\",\n      className: \"block mx-auto mt-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: data,\n      columns: columns,\n      rowKey: \"ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hkKfbYpINsdepaXU7tj3cn2c79A=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Table","Spin","Alert","moment","jsxDEV","_jsxDEV","columns","title","dataIndex","key","render","text","format","App","_s","data","setData","loading","setLoading","error","setError","fetchData","response","fetch","ok","errorText","Error","status","result","json","message","console","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","showIcon","size","dataSource","rowKey","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/site/frontend/app/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Table, Spin, Alert } from \"antd\";\nimport moment from \"moment\";\n\nconst columns = [\n  { title: \"IP Address\", dataIndex: \"IPAddress\", key: \"ip\" },\n  { title: \"Ping Time (ms)\", dataIndex: \"PingTime\", key: \"pingTime\" },\n  {\n    title: \"Last Seen\",\n    dataIndex: \"LastSeen\",\n    key: \"lastSeen\",\n    render: (text) => moment(text).format(\"YYYY-MM-DD HH:mm:ss\"),\n  },\n];\n\nexport default function App() {\n  const [data, setData] = useState([]);  // Состояние для данных\n  const [loading, setLoading] = useState(true);  // Состояние для индикатора загрузки\n  const [error, setError] = useState(\"\");  // Состояние для ошибки\n\n  // Функция для получения данных с сервера\n  const fetchData = async () => {\n    try {\n      setLoading(true);  // Включаем индикатор загрузки\n      setError(\"\");  // Сброс ошибки перед новым запросом\n\n      const response = await fetch(\"http://localhost:8080/ping-results\");\n\n      // Если ответ от сервера не успешный, выводим ошибку с деталью\n      if (!response.ok) {\n        const errorText = await response.text();  // Получаем текст ошибки от сервера\n        throw new Error(`Ошибка при получении данных: ${response.status} ${errorText}`);\n      }\n\n      // Преобразуем ответ в формат JSON\n      const result = await response.json();\n      setData(result);  // Устанавливаем данные в состояние\n    } catch (error) {\n      setError(`Не удалось загрузить данные. ${error.message}`);  // Выводим более точное сообщение об ошибке\n      console.error(\"Ошибка загрузки:\", error);  // Логируем ошибку в консоль\n    } finally {\n      setLoading(false);  // Окончание загрузки\n    }\n  };\n\n  // Хук useEffect для первого запроса и периодического обновления данных\n  useEffect(() => {\n    fetchData();  // Получаем данные сразу при загрузке компонента\n    const interval = setInterval(fetchData, 30000);  // Периодический запрос данных каждые 30 секунд\n    return () => clearInterval(interval);  // Очищаем интервал при размонтировании компонента\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <h2 className=\"text-xl font-bold mb-4\">Результаты пинга</h2>\n\n      {error && (\n        <Alert message={error} type=\"error\" showIcon className=\"mb-4\" />\n      )} {/* Отображаем ошибку */}\n      {loading ? (\n        <Spin size=\"large\" className=\"block mx-auto mt-4\" />\n      ) : (\n        <Table dataSource={data} columns={columns} rowKey=\"ID\" />\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}